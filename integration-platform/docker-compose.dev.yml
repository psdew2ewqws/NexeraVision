# Development Docker Compose Configuration
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: integration-postgres-dev
    environment:
      POSTGRES_DB: integration_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: E$$athecode006
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - integration-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: integration-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - integration-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API Gateway (Development with hot reload)
  api-gateway-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: integration-api-gateway-dev
    ports:
      - "4000:4000"
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:E$$athecode006@postgres:5432/integration_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-change-this-in-production
      - API_PREFIX=api/v1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - integration-network-dev
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    command: npm run start:debug

  # POS Adapter Service (Development)
  pos-adapter-dev:
    build:
      context: ./microservices/pos-adapter-service
      dockerfile: Dockerfile.dev
      target: development
    container_name: pos-adapter-dev
    ports:
      - "4002:4002"
      - "9230:9229" # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:E$$athecode006@postgres:5432/integration_platform
      - REDIS_URL=redis://redis:6379
      - SERVICE_PORT=4002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - integration-network-dev
    volumes:
      - ./microservices/pos-adapter-service:/app
      - /app/node_modules
    restart: unless-stopped
    command: npm run start:debug

  # Frontend (Development with hot reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: integration-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:4000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api-gateway-dev
    networks:
      - integration-network-dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    command: npm run dev

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:7
    container_name: integration-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@integration-platform.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - integration-network-dev
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: integration-redis-commander-dev
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - integration-network-dev
    restart: unless-stopped

volumes:
  postgres_dev_data:
  redis_dev_data:
  pgadmin_dev_data:

networks:
  integration-network-dev:
    driver: bridge