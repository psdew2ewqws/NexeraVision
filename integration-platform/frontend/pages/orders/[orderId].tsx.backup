import { useRouter } from 'next/router';
import { useQuery } from '@tanstack/react-query';
// Layout is already provided by _app.tsx, no need to import
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Order, ApiResponse } from '@/types';
import { apiClient } from '@/lib/api-client';
import { formatCurrency, formatDateTime, capitalize } from '@/lib/utils';
import { ArrowLeftIcon, MapPinIcon, PhoneIcon } from '@heroicons/react/24/outline';

const fetchOrder = async (orderId: string): Promise<Order> => {
  const response = await apiClient.get<ApiResponse<Order>>(`/orders/${orderId}`);
  if (!response.data.success) {
    throw new Error(response.data.message || 'Failed to fetch order');
  }
  return response.data.data;
};

export default function OrderDetails() {
  const router = useRouter();
  const { orderId } = router.query;

  const {
    data: order,
    isLoading,
    isError,
  } = useQuery({
    queryKey: ['order', orderId],
    queryFn: () => fetchOrder(orderId as string),
    enabled: !!orderId,
  });

  if (isLoading) {
    return (
      
        <div className="space-y-6">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/4 mb-2"></div>
            <div className="h-4 bg-gray-200 rounded w-1/2"></div>
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {Array.from({ length: 6 }).map((_, i) => (
              <div key={i} className="h-64 bg-gray-200 rounded-lg animate-pulse"></div>
            ))}
          </div>
        </div>
      
    );
  }

  if (isError || !order) {
    return (
      
        <div className="text-center py-12">
          <h3 className="text-lg font-medium text-gray-900 mb-2">Order not found</h3>
          <p className="text-gray-500 mb-4">The order you're looking for doesn't exist.</p>
          <Button onClick={() => router.back()}>Go Back</Button>
        </div>
      
    );
  }

  return (
    
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="sm" onClick={() => router.back()}>
            <ArrowLeftIcon className="h-4 w-4 mr-2" />
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Order #{order.external_id || order.id.slice(-8)}
            </h1>
            <p className="text-gray-600 mt-1">
              {capitalize(order.provider)} • {formatDateTime(order.created_at)}
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Order Status */}
          <Card>
            <CardHeader>
              <CardTitle>Order Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <span>Current Status:</span>
                  <Badge variant={order.status === 'delivered' ? 'success' : 'outline'}>
                    {capitalize(order.status)}
                  </Badge>
                </div>
                <div className="space-y-2">
                  <h4 className="font-medium text-sm">Timeline</h4>
                  {order.timeline.map((event, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span className="text-gray-600">{capitalize(event.status)}</span>
                      <span className="text-gray-500">{formatDateTime(event.timestamp)}</span>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Customer Information */}
          <Card>
            <CardHeader>
              <CardTitle>Customer</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h4 className="font-medium">{order.customer.name}</h4>
                  <div className="flex items-center mt-1 text-sm text-gray-600">
                    <PhoneIcon className="h-4 w-4 mr-1" />
                    {order.customer.phone}
                  </div>
                  {order.customer.email && (
                    <div className="text-sm text-gray-600">{order.customer.email}</div>
                  )}
                </div>

                <div className="border-t pt-4">
                  <div className="flex items-start">
                    <MapPinIcon className="h-4 w-4 mr-2 mt-0.5 text-gray-400" />
                    <div className="text-sm">
                      <div className="font-medium">Delivery Address</div>
                      <div className="text-gray-600 mt-1">
                        {order.customer.address.street}
                        {order.customer.address.building && `, Building ${order.customer.address.building}`}
                        {order.customer.address.floor && `, Floor ${order.customer.address.floor}`}
                        {order.customer.address.apartment && `, Apt ${order.customer.address.apartment}`}
                      </div>
                      <div className="text-gray-600">
                        {order.customer.address.area}, {order.customer.address.city}
                      </div>
                      {order.customer.address.notes && (
                        <div className="text-gray-500 mt-2">
                          <strong>Notes:</strong> {order.customer.address.notes}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Delivery Information */}
          <Card>
            <CardHeader>
              <CardTitle>Delivery Info</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-gray-600">Type:</span>
                  <Badge variant="outline">{capitalize(order.delivery_info.type)}</Badge>
                </div>

                {order.delivery_info.scheduled_time && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Scheduled:</span>
                    <span className="text-sm">{formatDateTime(order.delivery_info.scheduled_time)}</span>
                  </div>
                )}

                {order.delivery_info.delivery_time && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Delivered:</span>
                    <span className="text-sm">{formatDateTime(order.delivery_info.delivery_time)}</span>
                  </div>
                )}

                {order.delivery_info.driver_name && (
                  <div>
                    <div className="text-sm font-medium">Driver</div>
                    <div className="text-sm text-gray-600">{order.delivery_info.driver_name}</div>
                    {order.delivery_info.driver_phone && (
                      <div className="text-sm text-gray-600">{order.delivery_info.driver_phone}</div>
                    )}
                  </div>
                )}

                {order.delivery_info.tracking_url && (
                  <Button variant="outline" size="sm" asChild className="w-full">
                    <a href={order.delivery_info.tracking_url} target="_blank" rel="noopener noreferrer">
                      Track Delivery
                    </a>
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Order Items */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Order Items</CardTitle>
                <CardDescription>{order.items.length} items</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {order.items.map((item, index) => (
                    <div key={index} className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="font-medium">{item.name}</div>
                        {item.modifiers && item.modifiers.length > 0 && (
                          <div className="text-sm text-gray-600 mt-1">
                            {item.modifiers.map(modifier =>
                              `${modifier.name} (+${formatCurrency(modifier.price)})`
                            ).join(', ')}
                          </div>
                        )}
                        {item.special_instructions && (
                          <div className="text-sm text-gray-500 mt-1">
                            Note: {item.special_instructions}
                          </div>
                        )}
                      </div>
                      <div className="text-right">
                        <div className="font-medium">
                          {item.quantity} × {formatCurrency(item.price)}
                        </div>
                        <div className="text-sm text-gray-600">
                          = {formatCurrency(item.quantity * item.price)}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Order Summary */}
          <Card>
            <CardHeader>
              <CardTitle>Order Total</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>Subtotal:</span>
                  <span>{formatCurrency(order.totals.subtotal)}</span>
                </div>
                {order.totals.tax > 0 && (
                  <div className="flex justify-between">
                    <span>Tax:</span>
                    <span>{formatCurrency(order.totals.tax)}</span>
                  </div>
                )}
                {order.totals.delivery_fee > 0 && (
                  <div className="flex justify-between">
                    <span>Delivery Fee:</span>
                    <span>{formatCurrency(order.totals.delivery_fee)}</span>
                  </div>
                )}
                {order.totals.service_fee > 0 && (
                  <div className="flex justify-between">
                    <span>Service Fee:</span>
                    <span>{formatCurrency(order.totals.service_fee)}</span>
                  </div>
                )}
                {order.totals.discount > 0 && (
                  <div className="flex justify-between text-green-600">
                    <span>Discount:</span>
                    <span>-{formatCurrency(order.totals.discount)}</span>
                  </div>
                )}
                <div className="border-t pt-2 flex justify-between font-bold text-lg">
                  <span>Total:</span>
                  <span>{formatCurrency(order.totals.total)}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    
  );
}