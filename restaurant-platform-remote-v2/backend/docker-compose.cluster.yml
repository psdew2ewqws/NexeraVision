version: '3.8'

# PHASE 18: Multi-Instance Clustering Configuration
# This docker-compose file sets up a clustered PrinterMaster backend
# with Redis for state sharing and Nginx for load balancing

services:
  # Redis for Socket.io adapter (pub/sub and state management)
  redis:
    image: redis:7-alpine
    container_name: printermaster-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - printer_cluster

  # PostgreSQL database (shared across all instances)
  postgres:
    image: postgres:14-alpine
    container_name: printermaster-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: E$$athecode006
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - printer_cluster

  # Backend Instance 1
  backend-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: printermaster-backend-1
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3002
      INSTANCE_ID: backend-1
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - printer_cluster

  # Backend Instance 2
  backend-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: printermaster-backend-2
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3002
      INSTANCE_ID: backend-2
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - printer_cluster

  # Backend Instance 3
  backend-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: printermaster-backend-3
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3002
      INSTANCE_ID: backend-3
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - printer_cluster

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: printermaster-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - printer_cluster

  # Redis Commander (optional - for monitoring)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: printermaster-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - printer_cluster
    profiles:
      - monitoring

networks:
  printer_cluster:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
