name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/restaurant-platform

jobs:
  # Quality Assurance
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Backend QA
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint

      - name: Run backend type checking
        working-directory: ./backend
        run: npm run type-check

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

      # Frontend QA
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm run test

      # Security Scanning
      - name: Run security audit
        run: |
          cd backend && npm audit --audit-level high
          cd ../frontend && npm audit --audit-level high

  # Build and Push Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: qa
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      printer-image: ${{ steps.meta-printer.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend Image
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Frontend Image
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
            NEXT_PUBLIC_APP_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # PrinterMaster Image
      - name: Extract printer metadata
        id: meta-printer
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-printer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push printer image
        uses: docker/build-push-action@v5
        with:
          context: ./PrinterMasterv2
          file: ./PrinterMasterv2/Dockerfile.service
          push: true
          tags: ${{ steps.meta-printer.outputs.tags }}
          labels: ${{ steps.meta-printer.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          REDIS_URL: redis://localhost:6379

      - name: Run load tests
        working-directory: ./backend
        run: npm run test:load
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.backend-image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Production Deployment
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-tests, security]
    environment: production
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Update image tags in deployment manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/production/*.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/production/

      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/backend-deployment -n restaurant-platform
          kubectl rollout status deployment/frontend-deployment -n restaurant-platform
          kubectl rollout status deployment/printer-deployment -n restaurant-platform

      - name: Run deployment verification
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/backend-deployment -n restaurant-platform
          kubectl wait --for=condition=available --timeout=300s deployment/frontend-deployment -n restaurant-platform

          # Run health checks
          kubectl run curl-test --image=curlimages/curl:7.85.0 --rm -i --restart=Never -- \
            curl -f http://backend-service.restaurant-platform.svc.cluster.local:3001/health

          kubectl run curl-test --image=curlimages/curl:7.85.0 --rm -i --restart=Never -- \
            curl -f http://frontend-service.restaurant-platform.svc.cluster.local:3000/api/health

  # Staging Deployment (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    environment: staging
    if: github.event.inputs.environment == 'staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          # Staging deployment logic here
          echo "Deploying to staging environment..."

  # Post-deployment monitoring
  monitoring:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Setup monitoring alerts
        run: |
          # Configure monitoring and alerting
          echo "Setting up post-deployment monitoring..."

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Restaurant Platform deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Rollback to previous version
        run: |
          kubectl rollout undo deployment/backend-deployment -n restaurant-platform
          kubectl rollout undo deployment/frontend-deployment -n restaurant-platform
          kubectl rollout undo deployment/printer-deployment -n restaurant-platform

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          text: '⚠️ Restaurant Platform deployment failed - rolled back to previous version'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}