# PrinterMaster v2 - Production Docker Compose
# Enterprise-grade deployment configuration

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: printer-master-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: printer_master_v2_prod
      POSTGRES_USER: printer_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ../database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - printer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U printer_prod -d printer_master_v2_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: printer-master-cache
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - printer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.production
    container_name: printer-master-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://printer_prod:${DB_PASSWORD}@postgres:5432/printer_master_v2_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-100}
      FILE_UPLOAD_MAX_SIZE: ${FILE_UPLOAD_MAX_SIZE:-10485760}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: 9090
      
      # Health checks
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-60000}
      
      # License server
      LICENSE_SERVER_URL: ${LICENSE_SERVER_URL}
      LICENSE_VALIDATION_KEY: ${LICENSE_VALIDATION_KEY}
    ports:
      - "3001:3001"
      - "9090:9090" # Metrics port
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_temp:/app/temp
    networks:
      - printer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: printer-master-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    networks:
      - printer-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: printer-master-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - printer-network
    depends_on:
      - backend
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: printer-master-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - printer-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: printer-master-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - printer-network
    profiles:
      - monitoring

  # Backup service
  backup:
    image: postgres:14-alpine
    container_name: printer-master-backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - printer-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/backup.sh"]
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_temp:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  printer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Security and resource limits
configs:
  postgres_config:
    file: ./postgres/postgresql.conf

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  encryption_key:
    external: true