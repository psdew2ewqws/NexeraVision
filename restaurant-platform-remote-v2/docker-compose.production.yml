version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: restaurant-platform-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: E$$athecode006
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - restaurant-platform-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: restaurant-platform-redis
    command: redis-server --requirepass E$$athecode006 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - restaurant-platform-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: restaurant-platform-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
      REDIS_URL: redis://:E$$athecode006@redis:6379
      JWT_SECRET: ${JWT_SECRET}

      # Integration API Keys (from environment)
      DHUB_API_KEY: ${DHUB_API_KEY}
      DHUB_MERCHANT_ID: ${DHUB_MERCHANT_ID}
      CAREEM_API_KEY: ${CAREEM_API_KEY}
      CAREEM_API_SECRET: ${CAREEM_API_SECRET}
      CAREEM_STORE_ID: ${CAREEM_STORE_ID}
      TALABAT_API_KEY: ${TALABAT_API_KEY}
      TALABAT_MERCHANT_ID: ${TALABAT_MERCHANT_ID}

      # Webhook Secrets
      CAREEM_WEBHOOK_SECRET: ${CAREEM_WEBHOOK_SECRET}
      TALABAT_WEBHOOK_SECRET: ${TALABAT_WEBHOOK_SECRET}
      DHUB_WEBHOOK_SECRET: ${DHUB_WEBHOOK_SECRET}

      # POS System Configurations
      SQUARE_API_KEY: ${SQUARE_API_KEY}
      TOAST_API_KEY: ${TOAST_API_KEY}
      CLOVER_API_KEY: ${CLOVER_API_KEY}
      LIGHTSPEED_API_KEY: ${LIGHTSPEED_API_KEY}

      # File Storage
      FILE_STORAGE_TYPE: s3
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - restaurant-platform-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
        NEXT_PUBLIC_APP_ENV: production
    container_name: restaurant-platform-frontend
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - restaurant-platform-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PrinterMaster Desktop Service
  printer-master:
    build:
      context: ./PrinterMasterv2
      dockerfile: Dockerfile.service
    container_name: restaurant-platform-printer
    environment:
      NODE_ENV: production
      API_BASE_URL: http://backend:3001
      SERVICE_PORT: 8182
      WEBSOCKET_PORT: 8183
    volumes:
      - /dev/usb:/dev/usb
      - printer_configs:/app/config
    ports:
      - "8182:8182"
      - "8183:8183"
    privileged: true
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - restaurant-platform-network

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: restaurant-platform-nginx
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - restaurant-platform-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: restaurant-platform-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - restaurant-platform-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: restaurant-platform-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: postgres
      GF_DATABASE_PASSWORD: E$$athecode006
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3030:3000"
    depends_on:
      - postgres
      - prometheus
    restart: unless-stopped
    networks:
      - restaurant-platform-network

  # Integration Webhook Processor
  webhook-processor:
    build:
      context: ./backend
      dockerfile: Dockerfile.webhook
    container_name: restaurant-platform-webhooks
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
      REDIS_URL: redis://:E$$athecode006@redis:6379
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    volumes:
      - webhook_logs:/app/logs
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - restaurant-platform-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  printer_configs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  webhook_logs:
    driver: local

networks:
  restaurant-platform-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16