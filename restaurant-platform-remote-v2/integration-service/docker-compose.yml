version: '3.8'

services:
  # Integration Service
  integration-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: integration-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      SERVICE_NAME: integration-service
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
      BACKEND_URL: http://backend:3001
      BACKEND_API_KEY: ${BACKEND_API_KEY:-development-key}
      WEBHOOK_RATE_LIMIT: 100
      WEBHOOK_RATE_WINDOW_MS: 60000
      CAREEM_WEBHOOK_SECRET: ${CAREEM_WEBHOOK_SECRET:-careem-webhook-secret-change-in-production}
      TALABAT_WEBHOOK_SECRET: ${TALABAT_WEBHOOK_SECRET:-talabat-webhook-secret-change-in-production}
      RETRY_MAX_ATTEMPTS: 10
      RETRY_INITIAL_DELAY: 60000
      RETRY_MAX_DELAY: 86400000
      CIRCUIT_BREAKER_TIMEOUT: 5000
      CIRCUIT_BREAKER_ERROR_THRESHOLD: 50
      CIRCUIT_BREAKER_RESET_TIMEOUT: 30000
    depends_on:
      - postgres
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/webhooks/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (shared with main backend)
  postgres:
    image: postgres:14-alpine
    container_name: restaurant-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: E$$athecode006
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Backend Service (for reference, should be in main docker-compose)
  backend:
    image: restaurant-backend:latest
    container_name: restaurant-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:E$$athecode006@postgres:5432/postgres
    depends_on:
      - postgres
    networks:
      - restaurant-network

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: integration-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - integration-service
      - backend
    networks:
      - restaurant-network

volumes:
  postgres-data:
    driver: local

networks:
  restaurant-network:
    driver: bridge
    name: restaurant-network